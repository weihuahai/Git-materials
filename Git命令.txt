在这里我想将默认编辑器改为vim。打开.git/config文件，在core中添加 editor=vim即可。
或者运行命令 git config –global core.editor vim 修改更加方便。
简单方法如何把本地仓库同步到Github
1 .进入Github首页，点击New repository新建一个项目
2.点击Clone or dowload会出现一个地址，copy这个地址备用。
3接下来就到本地操作了，首先右键你的项目，如果你之前安装git成功的话，右键会出现两个新选项，分别为Git Gui Here,Git Bash Here,这里我们选择Git Bash Here，进入我的项目名。
接下来输入如下代码.把github上面的仓库克隆到本地
git clone https://github.com/weihuahai/Git-repository.git
4.这个步骤以后你的本地项目文件夹下面就会多出个文件夹，该文件夹名即为你github上面的项目名，我们把本地项目文件夹下的所有文件（除了新多出的那个文件夹不用），其余都复制到那个新多出的文件夹下，
5.接着继续输入命令 cd Test，进入Test文件夹
接下来依次输入以下代码即可完成其他剩余操作：
git add .        （注：别忘记后面的.，此操作是把Test文件夹下面的文件都添加进来）
git commit  -m  "提交信息"  （注：“提交信息”里面换成你需要，如“first commit”）
git push -u origin master   （注：此操作目的是把本地仓库push到github上面，此步骤需要你输入帐号和密码）

从本地创建
 方法一
1.点击Create repository，创建库，如果不选中Initialize this repository with a README
2.本地新建文件夹存放git。新建文件夹 然后 本地 git bash.echo "# 你想要说的" >> README.md （说明：echo "# 这里是你要创建的git项目的名字"）
3.再输入  

git init
     初始化一个git，初始完git后，如果你是window用户，你会在目录里看到一个.git文件夹，这就说明本地初始化git成功了，
4.输入   

git add README.md
   给git添加文件README.md，添加完以后，需要进行托付，并写明托付原因：

git commit -m "first commit"
其中-m后面的"first commit"就是你要写的托付原因，当然也是支持汉语的。接下来就是，添加远程仓库：(注意后面的链接是你创建github项目时，自动生成的)

git remote add origin https://github.com/yourname/-git-.git
添加完远程仓库分支后，接下来就是提交这个分支了：
git push -u origin master
提交的时候会要求你输入你的帐号和密码，如果没有要求也无关紧要，输入完成以后到我们的项目里看，它就创建成功了

方法 二
直接先把远程库创建好。如果我们当时选中Initialize this repository with a README(初始化本库)。
然后需要把这个远程库拉到本地就可以了。点击绿色按钮clone or download
复制里面的链接，我们再次打开命令行，linux如下：(window请打开Git bBash Here)

cd ~
mkdir gitproject（文件夹名）
cd gitproject/ 
首先到达home目录，创建一个文件夹名叫gitproject，再进入到文件夹里面。

然后使用clone命令，从远程库拉一个分支：

git clone https://github.com/weihuahai/playgit.git  
然后添加文件：

git add .
给git添加文件之后就和上面的步骤相同了，添加完以后，就该写托付，并写明托付原因：

git commit -a
这里使用-a来，当然上面的git commit -m "first commit"也是可以的。

最后git push，进行推送提交。

这里的本地化方式是先创建远程分支，再下拉到本地的。
你提交的时候它会给你进行提示：修改尚未加入提交（使用 "git add" 和/或 "git commit -a"）

如果你只是修改文件则直接：git commit -a，然后自动进入vim编辑器，你在英文输入法下按i键，然后在最上面一栏输入提交的内容(随便说说你都干了什么)，然后esc，英文输入法下：shift+：输入wq(w保存，q退出)，就可以了。

如果你有添加新文件，则在git commit -a之前添加一句git add -A就可以了，意思是添加所有的文件(包含你新添加的文件)到git版本控制器。

提交了项目，下来就是把信息推送到git分支上了，直接输入：git push 就可以了。

如果有其他人在分支上修改了东西，你需要把最新的git信息拉到你的本地git，这时你也只需要在你的项目文件里打开命令行，直接输入git pull就可以了

安装完Git 第一步 添加 用户信息，我们将添加用户信息 (用户名和邮箱)，所以当我们提交代码时，会产生带有用户信息的提交信息，这使得跟踪提交过程变得更容易。要添加用户信息，命令是git config：
$ git config --global user.name "weihuahai"
 $ git config --global user.email "weihuahai119@126.com"
$ git config --list  查看信息是否成功更新
 $git  remote  查看远程库信息   git remote -v 显示详细信息
在现有目录中初始化仓库
如果你打算使用 Git 来对现有的项目进行管理，你只需要进入该项目目录并输入：
$ git init
该命令将创建一个名为 .git 的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的骨干。 但是，在这个时候，我们仅仅是做了一个初始化的操作，你的项目里的文件还没有被跟踪。
如果你是在一个已经存在文件的文件夹（而不是空文件夹）中初始化 Git 仓库来进行版本控制的话，你应该开始跟踪这些文件并提交。 你可通过 git add 命令来实现对指定文件的跟踪，然后执行 git commit 提交：
$ git add *.c
$ git add LICENSE
$ git commit -m 'initial project version'
 现在，你已经得到了一个实际维护（或者说是跟踪）着若干个文件的 Git 仓库。
克隆仓库的命令格式是 git clone [url] 
git clone https://github.com/libgit2/libgit2 mylibgit
这将执行与上一个命令相同的操作，不过在本地创建的仓库名字变为 mylibgit。
工作流
你的本地仓库由 git 维护的三棵“树”组成。第一个是你的 工作目录，它持有实际文件；第二个是 暂存区（Index），它像个缓存区域，临时保存你的改动；最后是 HEAD，它指向你最后一次提交的结果
Git 工作流程是：1.在工作目录中添加，修改文件    2.将需要进行版本管理的文件放入暂存区域    3.将暂存区域的文件提交到Git仓库。因此Git管理的文件有三种状态：已修改（modified） ,已暂存（staged）和已提交（commited）依次对应上边的每一个流程

                              查看目前代码的修改状态
提交代码之前，首先应该检查目前所做的修改，运行git status命令
git log 查看当前分支历史 按Q退出查看
git reset --mixed HEAD~ 移动HEAD 的指向， 将其指向向上一个快照。将HEAD移动后指向的快照回滚到暂存区域
.     (两个波浪线就是 返回上上一个快照以此类推~ 10 上10个快照)
git rest --soft HEAD ~ 移动HEAD的指向，将其指向上一个快照 （比如储存仓库后悔，可以回滚到暂存区域）
git rest --hard HEAD ~ 移动HEAD的指向， 将其指向上一个快照  将 HEAD移动后指向的快照回滚到暂存区域  将 暂存区域的文件还原到工作目录 
                         reset 命令回滚快照三部曲
1.移动HEAD的指向（--soft）
2.将快照回滚到暂存区域（【--mixed】,默认）
3，将暂存区域还原到工作目录（--hard）
回滚指定快照
git reset 哈希数值
回滚个别文件  
git reset  版本快照 文件名/路径

实例1
多次更改
# echo bbb >> 1.txt
# git add 1.txt
# git commit -m "add bbb"
# echo ccc >> 1.txt
# git add 1.txt
# git commit -m "add ccc"
查看历史版本
# git log 
# 可以查看所有提交git仓库的记录操作
按照时间顺序排序，最上面的是最新的，最下面（最靠近命令行）的是最早的更改。显示的信息更多更丰富。
# git log --pretty=oneline  （git log --oneline）
# 在一行显示所有的更改信息
e027aa4715ef5e2a9626161a989a160da9426df1 add ccc
093e8cd81030c1c75b6330388f3626c96c12bca1 add aaa
版本号 描述
# git log --pretty=oneline --abbrev-commit
# 精简显示的信息
e9cac5d add 111
9fd1e07 11
53a659a add line
e27c209 111
恢复历史版本
# git reset --hard 
093e # 恢复指定的版本号，版本号只需前面四位即可，也可以复制完整。
回退历史版本
恢复历史版本之后，发现误操作，想恢复之前的版本，这时候使用 git log 并不能显示所有的信息。
# git reflog
093e8cd HEAD@{0}: 093e: updating HEAD
e027aa4 HEAD@{1}: commit: add ccc
093e8cd HEAD@{2}: commit: add aaa
# git reset --hard e027
 
显示框 ： J K上下翻动行  F G 上下翻动页   数字+ J K上下翻动多少行  D向下翻动半页 U向上翻动半页    /+搜索关键词 从上往下搜索    ？从下往上搜索 按H 帮助

       比较暂存区域与 工作目录
git diff      (---代表旧文件在暂存区域  +++代表新文件在工作区域的文件)
       比较两个历史快照
git diff     快照ID1  快照ID2    
       比较当前工作目录和Git仓库中的快照
git diff HEAD
       比较 暂存区域和Git 仓库中的快照
git diff --cached 快照ID   
           修改最后一次提交
git commit --amend 可以修改 提交说明然后再VIM里 ESC 然后shift +Z Z 退出， 或者直接 git commmit --amend -m "提交说明"
         删除文件
工作目录删除了文件， 在GIT里 git status 可以查看文件状态， 在暂存区域，然后用 check out 命令恢复到工作区域， git checkout -- 文件名
git rm 文件名   该命令删除的只是工作目录和暂存区域的文件，也就是取消跟踪，在下次提交时不纳入版本管理可以继续使用 git reset --soft  HEAD~修改仓库指针
如果暂存区域和工作目录都有同时被跟踪的文件，git rm -f 文件名 会强制删除 
如果只删除暂存区域文件保留工作区域文件，git rm --cached 文件名
          重命名文件
git mv 原文件名 新文件名                           git log --decorate许多时候知道commit是和哪一个分支或tag关联的是非常有用的. --decorate标                                                                 记会让git log显示每个commit的引用(如:分支、tag等).
                    创建分支
git branch feature
                    切换分支                   git log --decorate --oneline --graph --all 图形化显示所有的分支
git checkout feature
                    合并分支
git merge 分支名
                  删除分支
git branch -d 分支名
                   匿名分支和checkout命令

checkout命令 两种功能：1 从历史快照（或者暂存区域）中拷贝文件到工作目录    2 切换分支
当给定某个文件名时，Git 会从指定的提交中拷贝文件到暂存区域和工作目录，比如执行git checkout HEAD~ README.md命令会将 上一个快照中的README.md文件复制到工作目录和暂存区域中
如果命令中没有制定具体的快照ID，则将从暂存区域恢复指定文件到工作目录(git checkout README,md）
checkout 和reset 区别
两者都可以用于恢复指定快照的指定文件，并且他们都不会改变HEAD指针的指向
区别是 reset 命令只将制定文件恢复到暂存区域（--mixed），而checkout 命令是同时覆盖暂存区域和工作目录、
注意：也许你试图使用 git reset --hard HEAD~ README.md 命令让reset 同时覆盖工作目录，但Git回该诉你这是徒劳的（此时reset不允许使用--soft 或者 --hard）这样看来，在恢复文件方面，reset命令比checkout命令更安全
                    git拉取远程分支并创建本地分支
一、查看远程分支
使用如下git命令查看所有远程分支：
git branch -r
二、拉取远程分支并创建本地分支
方法一
使用如下命令：
git checkout -b 本地分支名x origin/远程分支名x
使用该方式会在本地新建分支x，并自动切换到该本地分支x。
采用此种方法建立的本地分支会和远程分支建立映射关系。
方式二
使用如下命令：
git fetch origin 远程分支名x:本地分支名x
使用该方式会在本地新建分支x，但是不会自动切换到该本地分支x，需要手动checkout。
采用此种方法建立的本地分支不会和远程分支建立映射关系。

重点：git 拉取其实只需要 git fetch origin xxx、 git pull origin xxx即可。
